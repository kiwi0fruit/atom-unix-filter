"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const CP = require("child_process");
let subscriptions;
exports.config = {
    command: {
        type: 'string',
        default: 'cat',
    },
    runOnSave: {
        type: 'boolean',
        default: false,
    },
};
function activate() {
    subscriptions = new atom_1.CompositeDisposable();
    subscriptions.add(atom.commands.add('atom-text-editor', {
        'unix-filter:run': ({ currentTarget }) => {
            run(currentTarget.getModel()).catch((e) => {
                console.error(e);
            });
        },
    }), atom.workspace.observeTextEditors((editor) => {
        const buf = editor.getBuffer();
        const disp = buf.onWillSave(async () => {
            const shouldRun = atom.config.get('unix-filter.runOnSave', {
                scope: editor.getLastCursor().getScopeDescriptor(),
            });
            if (shouldRun)
                return run(editor);
            else
                return;
        });
        buf.onDidDestroy(() => {
            subscriptions.remove(disp);
            disp.dispose();
        });
    }));
}
exports.activate = activate;
function deactivate() {
    subscriptions.dispose();
}
exports.deactivate = deactivate;
async function run(editor) {
    const text = editor.getText();
    const cmd = atom.config.get('unix-filter.command', {
        scope: editor.getLastCursor().getScopeDescriptor(),
    });
    return new Promise((resolve) => {
        const proc = CP.exec(cmd, { encoding: 'utf8' }, (error, result) => {
            if (error) {
                atom.notifications.addError(error.toString(), {
                    detail: error.message,
                    stack: error.stack,
                    dismissable: true,
                });
                resolve();
            }
            else {
                const [first, ...points] = editor
                    .getCursors()
                    .map((c) => c.getBufferPosition());
                editor.setText(result.replace(/^ +$/gm, ''));
                editor.setCursorBufferPosition(first);
                points.forEach((p) => editor.addCursorAtBufferPosition(p));
                resolve();
            }
        });
        proc.stdin.write(text);
        proc.stdin.end();
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQXNEO0FBQ3RELG9DQUFtQztBQUVuQyxJQUFJLGFBQWtDLENBQUE7QUFFekIsUUFBQSxNQUFNLEdBQUc7SUFDcEIsT0FBTyxFQUFFO1FBQ1AsSUFBSSxFQUFFLFFBQVE7UUFDZCxPQUFPLEVBQUUsS0FBSztLQUNmO0lBQ0QsU0FBUyxFQUFFO1FBQ1QsSUFBSSxFQUFFLFNBQVM7UUFDZixPQUFPLEVBQUUsS0FBSztLQUNmO0NBQ0YsQ0FBQTtBQUVEO0lBQ0UsYUFBYSxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtJQUN6QyxhQUFhLENBQUMsR0FBRyxDQUNmLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFO1FBQ3BDLGlCQUFpQixFQUFFLENBQUMsRUFBRSxhQUFhLEVBQUUsRUFBRSxFQUFFO1lBQ3ZDLEdBQUcsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtnQkFDeEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUNsQixDQUFDLENBQUMsQ0FBQTtRQUNKLENBQUM7S0FDRixDQUFDLEVBQ0YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQzNDLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQTtRQUM5QixNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1lBQ3JDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHVCQUF1QixFQUFFO2dCQUN6RCxLQUFLLEVBQUUsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDLGtCQUFrQixFQUFFO2FBQ25ELENBQUMsQ0FBQTtZQUNGLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQztnQkFBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1lBQ2pDLElBQUk7Z0JBQUMsTUFBTSxDQUFBO1FBQ2IsQ0FBQyxDQUFDLENBQUE7UUFDRixHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRTtZQUNwQixhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQzFCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUNoQixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUNILENBQUE7QUFDSCxDQUFDO0FBekJELDRCQXlCQztBQUVEO0lBQ0UsYUFBYSxDQUFDLE9BQU8sRUFBRSxDQUFBO0FBQ3pCLENBQUM7QUFGRCxnQ0FFQztBQUVELEtBQUssY0FBYyxNQUFrQjtJQUNuQyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDN0IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMscUJBQXFCLEVBQUU7UUFDakQsS0FBSyxFQUFFLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRTtLQUNuRCxDQUFDLENBQUE7SUFDRixNQUFNLENBQUMsSUFBSSxPQUFPLENBQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUNuQyxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNoRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNWLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFBRTtvQkFDNUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxPQUFPO29CQUNyQixLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7b0JBQ2xCLFdBQVcsRUFBRSxJQUFJO2lCQUNsQixDQUFDLENBQUE7Z0JBQ0YsT0FBTyxFQUFFLENBQUE7WUFDWCxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ04sTUFBTSxDQUFDLEtBQUssRUFBRSxHQUFHLE1BQU0sQ0FBQyxHQUFHLE1BQU07cUJBQzlCLFVBQVUsRUFBRTtxQkFDWixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUE7Z0JBQ3BDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtnQkFDNUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDLEtBQUssQ0FBQyxDQUFBO2dCQUNyQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDMUQsT0FBTyxFQUFFLENBQUE7WUFDWCxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUE7UUFDRixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUN0QixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBQ2xCLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUsIFRleHRFZGl0b3IgfSBmcm9tICdhdG9tJ1xuaW1wb3J0ICogYXMgQ1AgZnJvbSAnY2hpbGRfcHJvY2VzcydcblxubGV0IHN1YnNjcmlwdGlvbnM6IENvbXBvc2l0ZURpc3Bvc2FibGVcblxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcbiAgY29tbWFuZDoge1xuICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgIGRlZmF1bHQ6ICdjYXQnLFxuICB9LFxuICBydW5PblNhdmU6IHtcbiAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gIH0sXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgc3Vic2NyaXB0aW9ucyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcbiAgc3Vic2NyaXB0aW9ucy5hZGQoXG4gICAgYXRvbS5jb21tYW5kcy5hZGQoJ2F0b20tdGV4dC1lZGl0b3InLCB7XG4gICAgICAndW5peC1maWx0ZXI6cnVuJzogKHsgY3VycmVudFRhcmdldCB9KSA9PiB7XG4gICAgICAgIHJ1bihjdXJyZW50VGFyZ2V0LmdldE1vZGVsKCkpLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlKVxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICB9KSxcbiAgICBhdG9tLndvcmtzcGFjZS5vYnNlcnZlVGV4dEVkaXRvcnMoKGVkaXRvcikgPT4ge1xuICAgICAgY29uc3QgYnVmID0gZWRpdG9yLmdldEJ1ZmZlcigpXG4gICAgICBjb25zdCBkaXNwID0gYnVmLm9uV2lsbFNhdmUoYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBzaG91bGRSdW4gPSBhdG9tLmNvbmZpZy5nZXQoJ3VuaXgtZmlsdGVyLnJ1bk9uU2F2ZScsIHtcbiAgICAgICAgICBzY29wZTogZWRpdG9yLmdldExhc3RDdXJzb3IoKS5nZXRTY29wZURlc2NyaXB0b3IoKSxcbiAgICAgICAgfSlcbiAgICAgICAgaWYgKHNob3VsZFJ1bikgcmV0dXJuIHJ1bihlZGl0b3IpXG4gICAgICAgIGVsc2UgcmV0dXJuXG4gICAgICB9KVxuICAgICAgYnVmLm9uRGlkRGVzdHJveSgoKSA9PiB7XG4gICAgICAgIHN1YnNjcmlwdGlvbnMucmVtb3ZlKGRpc3ApXG4gICAgICAgIGRpc3AuZGlzcG9zZSgpXG4gICAgICB9KVxuICAgIH0pLFxuICApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWFjdGl2YXRlKCkge1xuICBzdWJzY3JpcHRpb25zLmRpc3Bvc2UoKVxufVxuXG5hc3luYyBmdW5jdGlvbiBydW4oZWRpdG9yOiBUZXh0RWRpdG9yKSB7XG4gIGNvbnN0IHRleHQgPSBlZGl0b3IuZ2V0VGV4dCgpXG4gIGNvbnN0IGNtZCA9IGF0b20uY29uZmlnLmdldCgndW5peC1maWx0ZXIuY29tbWFuZCcsIHtcbiAgICBzY29wZTogZWRpdG9yLmdldExhc3RDdXJzb3IoKS5nZXRTY29wZURlc2NyaXB0b3IoKSxcbiAgfSlcbiAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlKSA9PiB7XG4gICAgY29uc3QgcHJvYyA9IENQLmV4ZWMoY21kLCB7IGVuY29kaW5nOiAndXRmOCcgfSwgKGVycm9yLCByZXN1bHQpID0+IHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkRXJyb3IoZXJyb3IudG9TdHJpbmcoKSwge1xuICAgICAgICAgIGRldGFpbDogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICBzdGFjazogZXJyb3Iuc3RhY2ssXG4gICAgICAgICAgZGlzbWlzc2FibGU6IHRydWUsXG4gICAgICAgIH0pXG4gICAgICAgIHJlc29sdmUoKSAvLyBhbHdheXMgc2F2ZSB0aGUgZmlsZSFcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IFtmaXJzdCwgLi4ucG9pbnRzXSA9IGVkaXRvclxuICAgICAgICAgIC5nZXRDdXJzb3JzKClcbiAgICAgICAgICAubWFwKChjKSA9PiBjLmdldEJ1ZmZlclBvc2l0aW9uKCkpXG4gICAgICAgIGVkaXRvci5zZXRUZXh0KHJlc3VsdC5yZXBsYWNlKC9eICskL2dtLCAnJykpXG4gICAgICAgIGVkaXRvci5zZXRDdXJzb3JCdWZmZXJQb3NpdGlvbihmaXJzdClcbiAgICAgICAgcG9pbnRzLmZvckVhY2goKHApID0+IGVkaXRvci5hZGRDdXJzb3JBdEJ1ZmZlclBvc2l0aW9uKHApKVxuICAgICAgICByZXNvbHZlKClcbiAgICAgIH1cbiAgICB9KVxuICAgIHByb2Muc3RkaW4ud3JpdGUodGV4dClcbiAgICBwcm9jLnN0ZGluLmVuZCgpXG4gIH0pXG59XG4iXX0=