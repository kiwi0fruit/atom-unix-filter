"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const CP = require("child_process");
let subs;
exports.config = {
    command: {
        type: 'string',
        default: 'cat',
    },
    runOnSave: {
        type: 'boolean',
        default: false,
    },
};
function activate() {
    subs = new atom_1.CompositeDisposable();
    subs.add(atom.commands.add('atom-text-editor', {
        'unix-filter:run': ({ currentTarget }) => {
            run(currentTarget.getModel()).catch((e) => {
                console.error(e);
            });
        },
        'unix-filter:exec': async ({ currentTarget }) => {
            const textEditorElement = document.createElement('atom-text-editor');
            textEditorElement.setAttribute('mini', '');
            const panel = atom.workspace.addModalPanel({
                item: textEditorElement,
                visible: true,
            });
            textEditorElement.focus();
            const disp = new atom_1.CompositeDisposable();
            const cont = await new Promise((resolve) => {
                disp.add(atom.commands.add(textEditorElement, {
                    'core:confirm': () => resolve(true),
                    'core:cancel': () => resolve(false),
                }));
            });
            disp.dispose();
            panel.destroy();
            if (cont) {
                const cmd = textEditorElement.getModel().getText();
                customCommand(currentTarget.getModel(), cmd).catch((e) => {
                    console.error(e);
                });
            }
        },
    }), atom.workspace.observeTextEditors((editor) => {
        const buf = editor.getBuffer();
        const disp = new atom_1.CompositeDisposable();
        disp.add(buf.onWillSave(async () => {
            const shouldRun = atom.config.get('unix-filter.runOnSave', {
                scope: editor.getRootScopeDescriptor(),
            });
            if (shouldRun)
                await run(editor);
        }), buf.onDidDestroy(() => {
            subs.remove(disp);
            disp.dispose();
        }));
        subs.add(disp);
    }));
}
exports.activate = activate;
function deactivate() {
    subs.dispose();
}
exports.deactivate = deactivate;
async function run(editor) {
    const cmd = atom.config.get('unix-filter.command', {
        scope: editor.getRootScopeDescriptor(),
    });
    return customCommand(editor, cmd);
}
async function customCommand(editor, cmd) {
    const text = editor.getText();
    return new Promise((resolve) => {
        const proc = CP.exec(cmd, { encoding: 'utf8' }, (error, result) => {
            if (error) {
                atom.notifications.addError(error.toString(), {
                    detail: error.message,
                    stack: error.stack,
                    dismissable: true,
                });
                resolve();
            }
            else {
                const [first, ...points] = editor
                    .getCursors()
                    .map((c) => c.getBufferPosition());
                editor.setText(result.replace(/^ +$/gm, ''));
                editor.setCursorBufferPosition(first);
                points.forEach((p) => editor.addCursorAtBufferPosition(p));
                resolve();
            }
        });
        proc.stdin.write(text);
        proc.stdin.end();
    });
}
//# sourceMappingURL=data:application/json;base64,